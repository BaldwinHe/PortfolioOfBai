# -*- coding: utf-8 -*-
"""fetchData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAVX0M6UntaSqGWc98hpZ_SC3nKNXsIa
"""

# Commented out IPython magic to ensure Python compatibility.
import requests
import json
import time
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots

indicator_list = ['SP.POP.TOTL','NY.GDP.MKTP.CD',
                'EG.ELC.ACCS.UR.ZS','EG.ELC.ACCS.RU.ZS']
countryAll = ';'.join(['BR','RU','IN','CN','ZA'])

def convertTime(timestamp_list):
    time_current_list = []
    for time_stamp in timestamp_list:
        time_local = time.localtime(time_stamp)
        time_current = time.strftime("%Y-%m-%d %H:%M:%S",time_local)
        time_current_list.append(time_current)
    return time_current_list

def convertFahrenheit(fahrenheit_list):
    celsius_list = []
    for fahrenheit in fahrenheit_list:
        celsius = round((fahrenheit - 32) / 1.8,1)
        celsius_list.append(celsius)
    return celsius_list

def getApiData(url):
    payload = {}
    files = {}
    headers= {'Accept-Encoding': 'gzip'}
    session = requests.Session()
    response = session.request("GET", url, headers=headers, 
                               data = payload, files = files)
    responseJson = json.loads(response.text)
    return responseJson

def fetchDataFromAPI():
    df_list = []
    for indicator_type in indicator_list:
        text = 'http://api.worldbank.org/v2/country/{}/indicator/{} \
        ?format=json&per_page=1000&date=2007:2017'.format(countryAll,indicator_type)
        temp = getApiData(text)[1]
        df = pd.read_json(json.dumps(temp),orient='columns')
        df = df.drop(['unit','obs_status','decimal','countryiso3code'],axis=1)
        df['country'] = df['country'].apply(lambda x:x['value'])
        df['indicator'] = df['indicator'].apply(lambda x:x['value'])
        df = df.rename(columns={'value':df.indicator[0]})
        df = df.drop(['indicator'],axis=1)
        df_list.append(df)
    dfAns = df_list[0]
    for df in df_list:
        dfAns = pd.merge(dfAns,df,on=['country','date'],how='outer')
    dfAns = dfAns.T.drop_duplicates().T
    dfAns = dfAns.rename(columns={'Population, total_x':'Population, total'})
    dfAns.columns = ['country','date','population','GDP',
                    'accessElectricityInUrban','accessElectricityInRural']
    dfAns['GDP_AVE'] = dfAns.GDP/dfAns.population
    return dfAns

def return_figure():
    fetchFromAPI = False
    if fetchFromAPI:
        dfAns = fetchDataFromAPI()
    else:
        dfAns = pd.read_csv('data/dataset/data.csv')
    results = {}
    country_list = dfAns.country.unique()
    for country in country_list:
        results[country] = dfAns[dfAns.country == country]

    figures = []

    # first chart
    fig = go.Figure()
    for country in country_list:
        fig.add_trace(
            go.Scatter(
                x=results[country].date.unique(),
                y=results[country]['population'],
                mode='lines+markers',
                name=country
            )
        )
    layout = dict(
        title = 'Population of the BRICS',
        xaxis=dict(
            title='year'
        ),
        yaxis=dict(
            title='populartion'
        ),
        barmode='group'
    )
    fig.update_layout(layout)
    figures.append(fig)

    # second chart
    fig = go.Figure()
    for country in country_list:
        fig.add_trace(
            go.Scatter(
                x=results[country].date.unique(),
                y=results[country]['GDP_AVE'],
                mode='lines+markers',
                name=country
            )
        )
    layout = dict(
        title = 'GDP per capita of the BRICS',
        xaxis=dict(
            title='year'
        ),
        yaxis=dict(
            title='GDP per capita'
        ),
        barmode='group'
    )
    fig.update_layout(layout)
    figures.append(fig)

    # third chart
    fig = go.Figure()
    for country in country_list:
        fig.add_trace(
            go.Scatter(
                x=results[country].date.unique(),
                y=results[country]['GDP'],
                mode='lines+markers',
                name=country
            )
        )
    layout = dict(
        title = 'Total GDP of the BRICS',
        xaxis=dict(
            title='year'
        ),
        yaxis=dict(
            title='Total GDP'
        ),
        barmode='group'
    )
    fig.update_layout(layout)
    figures.append(fig)

    # fourth chart
    fig = make_subplots(
        rows=1, cols=5, shared_xaxes=True,
        shared_yaxes=True,
        vertical_spacing=0.02,
        subplot_titles=country_list
    )
    for i, country in enumerate(country_list):
        fig.add_trace(
            go.Scatter(
                x=results[country].date.unique(),
                y=results[country]['accessElectricityInUrban'],
                mode='lines+markers',
                line=dict(
                    dash='dot'
                ),
                name=country + '(Urban)',
            ),
            row=1, col=i+1
        )
        fig.add_trace(
            go.Scatter(
                x=results[country].date.unique(),
                y=results[country]['accessElectricityInRural'],
                name=country+'(Rural)'
            ),
            row=1, col=i+1
        )
    layout = dict(
        title_text="Access to electricity, urban/rural (% of urban/rural population)"
    )
    fig.update_layout(layout)
    figures.append(fig)

    return figures